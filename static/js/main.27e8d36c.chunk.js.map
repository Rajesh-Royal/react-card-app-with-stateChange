{"version":3,"sources":["Avatarlist.js","Card.js","serviceWorker.js","index.js"],"names":["Avatarlist","className","src","this","props","name","alt","href","Component","Card","state","heading","setState","avatararray","avatarlistarray","map","avatar","i","onClick","headchange","Boolean","window","location","hostname","match","ReactDom","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAmBeA,G,mMAfP,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,uCACX,yBAAKA,UAAU,eAAeC,IAAG,2CAAsCC,KAAKC,MAAMC,MAAQC,IAAI,mBAC9F,yBAAKL,UAAU,aACX,wBAAIA,UAAU,cAAcE,KAAKC,MAAMC,MACvC,uBAAGJ,UAAU,aAAb,kGACA,uBAAGM,KAAK,IAAIN,UAAU,mBAAtB,kB,GATCO,cCgDVC,E,YA1CX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,QAAS,4CAHH,E,0EAOVR,KAAKS,SAAS,CACVD,QAAQ,Y,+BAIN,IAAD,OAECE,EAAc,CAChB,CACIR,KAAM,UAEV,CACIA,KAAM,SAEV,CACIA,KAAM,UAEV,CACIA,KAAM,UAIRS,EAAkBD,EAAYE,IAAI,SAACC,EAAQC,GAAT,OAAe,kBAAC,EAAD,CAAYZ,KAAMQ,EAAYI,GAAGZ,SAExF,OACI,6BACI,wBAAIJ,UAAU,eAAeE,KAAKO,MAAMC,SACvCG,EACD,yBAAKb,UAAU,oCAAf,IAAmD,4BAAQA,UAAU,mBAAmBiB,QAAS,kBAAI,EAAKC,eAAvD,kB,GApChDX,aCKCY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.27e8d36c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Avatarlist extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"cardwrap\">\r\n                <div className=\"card animated pulse infinite slower\">\r\n                    <img className=\"card-img-top\" src={`https://joeschmoe.io/api/v1/male/${this.props.name}`} alt=\"Card image cap\" />\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{this.props.name}</h5>\r\n                        <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\r\n                        <a href=\"#\" className=\"btn btn-primary\">Hire Me</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Avatarlist;","import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './style.css'\r\nimport 'animate.css'\r\nimport Avatarlist from './Avatarlist'\r\n\r\n\r\nclass Card extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            heading: \"Hello, This Is my first react Project :)\"\r\n        }\r\n    }\r\n    headchange (){\r\n        this.setState({\r\n            heading:\"Boom!\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const avatararray = [\r\n            {\r\n                name: \"Rajesh\"\r\n            },\r\n            {\r\n                name: \"Pappy\"\r\n            },\r\n            {\r\n                name: \"Chetan\"\r\n            },\r\n            {\r\n                name: \"Aarvi\"\r\n            }\r\n        ]\r\n\r\n        const avatarlistarray = avatararray.map((avatar, i) => <Avatarlist name={avatararray[i].name} />)\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"text-center\">{this.state.heading}</h1>\r\n                {avatarlistarray}\r\n                <div className=\"col-md-12 center-block btncenter\"> <button className=\"btn center-block\" onClick={()=>this.headchange()}>Click Me</button></div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDom from 'react-dom'\nimport Card from './Card'\nimport * as serviceWorker from './serviceWorker'\n\n\n\nReactDom.render(<Card/>, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}